generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Appointment {
  id              String   @id @default(uuid())
  name            String // Nome do paciente
  email           String
  phone           String
  appointmentDate DateTime // agendamento
  time            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  serviceId String
  service   Services @relation(fields: [serviceId], references: [id])

  userId String // id da clinica (user)
  user   User   @relation(fields: [userId], references: [id])
}

model Reminder {
  id          String   @id @default(uuid())
  descripiton String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String?
  User   User?   @relation(fields: [userId], references: [id])
}

model Services {
  id        String   @id @default(uuid())
  name      String
  price     Int
  duration  Int
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId      String?
  User        User?         @relation(fields: [userId], references: [id])
  Appointment Appointment[]
}

enum Plan {
  BASIC
  PROFESSIONAL
}

model Subscription {
  id      String @id @default(uuid())
  status  String
  plan    Plan
  praceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime? @map("email_verified")
  image              String?
  adress             String?   @default("")
  phone              String?   @default("")
  status             Boolean   @default(true)
  timeZone           String?
  stripe_customer_id String?
  times              String[]@default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  subscription Subscription? // relacionamento onde 1 user pode ter 1 assinatura 
  services     Services[]
  Reminder     Reminder[]
  Appointment  Appointment[]

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
